{"ast":null,"code":"/**\r\n * Utility functions for high-quality avatar generation\r\n */\n\n// Collection of high-quality portrait APIs\nconst PORTRAIT_APIS = {\n  // RandomUser API provides consistent, high-quality portraits with gender selection\n  randomuser: {\n    getUrl: (gender, id) => {\n      // Convert ID to a consistent number between 1-99\n      const avatarNumber = Math.abs(hashCode(id) % 99) + 1;\n      return `https://randomuser.me/api/portraits/${gender === 'male' ? 'men' : 'women'}/${avatarNumber}.jpg`;\n    }\n  }\n};\n\n// Simple string hash function to generate consistent numbers from IDs\nfunction hashCode(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash;\n}\n\n/**\r\n * Get high-quality realistic human portrait URL based on user object\r\n * @param {Object|string} user - User object with gender field or user ID string\r\n * @returns {string} - URL to the high-quality portrait image\r\n */\nexport const getAvatarUrl = user => {\n  // If user is an ID string (for backward compatibility)\n  if (typeof user === 'string') {\n    const id = user;\n    // For backward compatibility, determine gender from ID\n    const gender = Math.abs(hashCode(id) % 2) === 0 ? 'male' : 'female';\n    return PORTRAIT_APIS.randomuser.getUrl(gender, id);\n  }\n\n  // If user is an object with gender field\n  if (user && user.gender && user._id) {\n    return PORTRAIT_APIS.randomuser.getUrl(user.gender, user._id);\n  }\n\n  // Fallback for when user object doesn't have gender or _id\n  return 'https://randomuser.me/api/portraits/lego/1.jpg';\n};","map":{"version":3,"names":["PORTRAIT_APIS","randomuser","getUrl","gender","id","avatarNumber","Math","abs","hashCode","str","hash","i","length","char","charCodeAt","getAvatarUrl","user","_id"],"sources":["C:/Users/NTS-HarshvardhanP/Desktop/Isha_Project/frontend/src/utils/avatarUtils.js"],"sourcesContent":["/**\r\n * Utility functions for high-quality avatar generation\r\n */\r\n\r\n// Collection of high-quality portrait APIs\r\nconst PORTRAIT_APIS = {\r\n  // RandomUser API provides consistent, high-quality portraits with gender selection\r\n  randomuser: {\r\n    getUrl: (gender, id) => {\r\n      // Convert ID to a consistent number between 1-99\r\n      const avatarNumber = Math.abs(hashCode(id) % 99) + 1;\r\n      return `https://randomuser.me/api/portraits/${gender === 'male' ? 'men' : 'women'}/${avatarNumber}.jpg`;\r\n    }\r\n  }\r\n};\r\n\r\n// Simple string hash function to generate consistent numbers from IDs\r\nfunction hashCode(str) {\r\n  let hash = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const char = str.charCodeAt(i);\r\n    hash = ((hash << 5) - hash) + char;\r\n    hash = hash & hash; // Convert to 32bit integer\r\n  }\r\n  return hash;\r\n}\r\n\r\n/**\r\n * Get high-quality realistic human portrait URL based on user object\r\n * @param {Object|string} user - User object with gender field or user ID string\r\n * @returns {string} - URL to the high-quality portrait image\r\n */\r\nexport const getAvatarUrl = (user) => {\r\n  // If user is an ID string (for backward compatibility)\r\n  if (typeof user === 'string') {\r\n    const id = user;\r\n    // For backward compatibility, determine gender from ID\r\n    const gender = Math.abs(hashCode(id) % 2) === 0 ? 'male' : 'female';\r\n    return PORTRAIT_APIS.randomuser.getUrl(gender, id);\r\n  }\r\n  \r\n  // If user is an object with gender field\r\n  if (user && user.gender && user._id) {\r\n    return PORTRAIT_APIS.randomuser.getUrl(user.gender, user._id);\r\n  }\r\n  \r\n  // Fallback for when user object doesn't have gender or _id\r\n  return 'https://randomuser.me/api/portraits/lego/1.jpg';\r\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,aAAa,GAAG;EACpB;EACAC,UAAU,EAAE;IACVC,MAAM,EAAEA,CAACC,MAAM,EAAEC,EAAE,KAAK;MACtB;MACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACJ,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;MACpD,OAAO,uCAAuCD,MAAM,KAAK,MAAM,GAAG,KAAK,GAAG,OAAO,IAAIE,YAAY,MAAM;IACzG;EACF;AACF,CAAC;;AAED;AACA,SAASG,QAAQA,CAACC,GAAG,EAAE;EACrB,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,MAAME,IAAI,GAAGJ,GAAG,CAACK,UAAU,CAACH,CAAC,CAAC;IAC9BD,IAAI,GAAI,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAIG,IAAI;IAClCH,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAAC,CAAC;EACtB;EACA,OAAOA,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,YAAY,GAAIC,IAAI,IAAK;EACpC;EACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAMZ,EAAE,GAAGY,IAAI;IACf;IACA,MAAMb,MAAM,GAAGG,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACJ,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,QAAQ;IACnE,OAAOJ,aAAa,CAACC,UAAU,CAACC,MAAM,CAACC,MAAM,EAAEC,EAAE,CAAC;EACpD;;EAEA;EACA,IAAIY,IAAI,IAAIA,IAAI,CAACb,MAAM,IAAIa,IAAI,CAACC,GAAG,EAAE;IACnC,OAAOjB,aAAa,CAACC,UAAU,CAACC,MAAM,CAACc,IAAI,CAACb,MAAM,EAAEa,IAAI,CAACC,GAAG,CAAC;EAC/D;;EAEA;EACA,OAAO,gDAAgD;AACzD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}