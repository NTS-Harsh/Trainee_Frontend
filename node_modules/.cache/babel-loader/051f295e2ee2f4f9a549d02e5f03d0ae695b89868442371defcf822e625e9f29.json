{"ast":null,"code":"// import { takeLatest, put, call, all, select } from 'redux-saga/effects';\n// import axios from 'axios';\n\n// // Action Types\n// export const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST';\n// export const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\n// export const USER_LOGIN_FAILURE = 'USER_LOGIN_FAILURE';\n\n// export const USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST';\n// export const USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS';\n// export const USER_REGISTER_FAILURE = 'USER_REGISTER_FAILURE';\n\n// export const USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST';\n// export const USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS';\n// export const USER_DETAILS_FAILURE = 'USER_DETAILS_FAILURE';\n\n// export const USER_UPDATE_PROFILE_REQUEST = 'USER_UPDATE_PROFILE_REQUEST';\n// export const USER_UPDATE_PROFILE_SUCCESS = 'USER_UPDATE_PROFILE_SUCCESS';\n// export const USER_UPDATE_PROFILE_FAILURE = 'USER_UPDATE_PROFILE_FAILURE';\n\n// export const USER_LOGOUT = 'USER_LOGOUT';\n\n// // Action Creators\n// export const loginRequest = (email, password) => ({\n//   type: USER_LOGIN_REQUEST,\n//   payload: { email, password }\n// });\n\n// export const registerRequest = (userData) => ({\n//   type: USER_REGISTER_REQUEST,\n//   payload: userData\n// });\n\n// export const getUserDetailsRequest = () => ({\n//   type: USER_DETAILS_REQUEST\n// });\n\n// export const updateUserProfileRequest = (userData) => ({\n//   type: USER_UPDATE_PROFILE_REQUEST,\n//   payload: userData\n// });\n\n// export const logoutRequest = () => ({\n//   type: USER_LOGOUT\n// });\n\n// // Selectors\n// const getUserState = (state) => state.user;\n\n// // Sagas\n// function* loginSaga(action) {\n//   try {\n//     const { email, password } = action.payload;\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//     };\n\n//     const { data } = yield call(\n//       axios.post,\n//       '/api/users/login',\n//       { email, password },\n//       config\n//     );\n\n//     yield call([localStorage, 'setItem'], 'userInfo', JSON.stringify(data));\n\n//     // Dispatch only the Redux Saga action\n//     yield put({ type: USER_LOGIN_SUCCESS, payload: data });\n//   } catch (error) {\n//     yield put({\n//       type: USER_LOGIN_FAILURE,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     });\n//   }\n// }\n\n// function* registerSaga(action) {\n//   try {\n//     const { name, email, password, department, gender } = action.payload;\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//     };\n\n//     const { data } = yield call(\n//       axios.post,\n//       '/api/users',\n//       { name, email, password, department, gender },\n//       config\n//     );\n\n//     yield call([localStorage, 'setItem'], 'userInfo', JSON.stringify(data));\n\n//     // Dispatch only the Redux Saga actions\n//     yield put({ type: USER_REGISTER_SUCCESS, payload: data });\n//     yield put({ type: USER_LOGIN_SUCCESS, payload: data });\n//   } catch (error) {\n//     yield put({\n//       type: USER_REGISTER_FAILURE,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     });\n//   }\n// }\n\n// function* getUserDetailsSaga() {\n//   try {\n//     const { userInfo } = yield select(getUserState);\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     };\n\n//     const { data } = yield call(axios.get, '/api/users/profile', config);\n\n//     // Dispatch only the Redux Saga action\n//     yield put({ type: USER_DETAILS_SUCCESS, payload: data });\n//   } catch (error) {\n//     yield put({\n//       type: USER_DETAILS_FAILURE,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     });\n//   }\n// }\n\n// function* updateUserProfileSaga(action) {\n//   try {\n//     const { userInfo } = yield select(getUserState);\n\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     };\n\n//     const { data } = yield call(\n//       axios.put,\n//       '/api/users/profile',\n//       action.payload,\n//       config\n//     );\n\n//     // Dispatch only the Redux Saga actions\n//     yield put({ type: USER_UPDATE_PROFILE_SUCCESS, payload: data });\n//     yield put({ type: USER_LOGIN_SUCCESS, payload: data });\n//     yield call([localStorage, 'setItem'], 'userInfo', JSON.stringify(data));\n//   } catch (error) {\n//     yield put({\n//       type: USER_UPDATE_PROFILE_FAILURE,\n//       payload:\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message,\n//     });\n//   }\n// }\n\n// function* logoutSaga() {\n//   yield call([localStorage, 'removeItem'], 'userInfo');\n// }\n\n// // Watcher Sagas\n// function* watchUserLogin() {\n//   yield takeLatest(USER_LOGIN_REQUEST, loginSaga);\n// }\n\n// function* watchUserRegister() {\n//   yield takeLatest(USER_REGISTER_REQUEST, registerSaga);\n// }\n\n// function* watchGetUserDetails() {\n//   yield takeLatest(USER_DETAILS_REQUEST, getUserDetailsSaga);\n// }\n\n// function* watchUpdateUserProfile() {\n//   yield takeLatest(USER_UPDATE_PROFILE_REQUEST, updateUserProfileSaga);\n// }\n\n// function* watchUserLogout() {\n//   yield takeLatest(USER_LOGOUT, logoutSaga);\n// }\n\n// // Root Saga\n// export function* userSagas() {\n//   yield all([\n//     watchUserLogin(),\n//     watchUserRegister(),\n//     watchGetUserDetails(),\n//     watchUpdateUserProfile(),\n//     watchUserLogout(),\n//   ]);\n// }","map":{"version":3,"names":[],"sources":["C:/Users/NTS-HarshvardhanP/Desktop/Isha_Project/frontend/src/redux/sagas/userSagas.js"],"sourcesContent":["// import { takeLatest, put, call, all, select } from 'redux-saga/effects';\r\n// import axios from 'axios';\r\n\r\n// // Action Types\r\n// export const USER_LOGIN_REQUEST = 'USER_LOGIN_REQUEST';\r\n// export const USER_LOGIN_SUCCESS = 'USER_LOGIN_SUCCESS';\r\n// export const USER_LOGIN_FAILURE = 'USER_LOGIN_FAILURE';\r\n\r\n// export const USER_REGISTER_REQUEST = 'USER_REGISTER_REQUEST';\r\n// export const USER_REGISTER_SUCCESS = 'USER_REGISTER_SUCCESS';\r\n// export const USER_REGISTER_FAILURE = 'USER_REGISTER_FAILURE';\r\n\r\n// export const USER_DETAILS_REQUEST = 'USER_DETAILS_REQUEST';\r\n// export const USER_DETAILS_SUCCESS = 'USER_DETAILS_SUCCESS';\r\n// export const USER_DETAILS_FAILURE = 'USER_DETAILS_FAILURE';\r\n\r\n// export const USER_UPDATE_PROFILE_REQUEST = 'USER_UPDATE_PROFILE_REQUEST';\r\n// export const USER_UPDATE_PROFILE_SUCCESS = 'USER_UPDATE_PROFILE_SUCCESS';\r\n// export const USER_UPDATE_PROFILE_FAILURE = 'USER_UPDATE_PROFILE_FAILURE';\r\n\r\n// export const USER_LOGOUT = 'USER_LOGOUT';\r\n\r\n// // Action Creators\r\n// export const loginRequest = (email, password) => ({\r\n//   type: USER_LOGIN_REQUEST,\r\n//   payload: { email, password }\r\n// });\r\n\r\n// export const registerRequest = (userData) => ({\r\n//   type: USER_REGISTER_REQUEST,\r\n//   payload: userData\r\n// });\r\n\r\n// export const getUserDetailsRequest = () => ({\r\n//   type: USER_DETAILS_REQUEST\r\n// });\r\n\r\n// export const updateUserProfileRequest = (userData) => ({\r\n//   type: USER_UPDATE_PROFILE_REQUEST,\r\n//   payload: userData\r\n// });\r\n\r\n// export const logoutRequest = () => ({\r\n//   type: USER_LOGOUT\r\n// });\r\n\r\n// // Selectors\r\n// const getUserState = (state) => state.user;\r\n\r\n// // Sagas\r\n// function* loginSaga(action) {\r\n//   try {\r\n//     const { email, password } = action.payload;\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//     };\r\n\r\n//     const { data } = yield call(\r\n//       axios.post,\r\n//       '/api/users/login',\r\n//       { email, password },\r\n//       config\r\n//     );\r\n    \r\n//     yield call([localStorage, 'setItem'], 'userInfo', JSON.stringify(data));\r\n    \r\n//     // Dispatch only the Redux Saga action\r\n//     yield put({ type: USER_LOGIN_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     yield put({\r\n//       type: USER_LOGIN_FAILURE,\r\n//       payload:\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// function* registerSaga(action) {\r\n//   try {\r\n//     const { name, email, password, department, gender } = action.payload;\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//     };\r\n\r\n//     const { data } = yield call(\r\n//       axios.post,\r\n//       '/api/users',\r\n//       { name, email, password, department, gender },\r\n//       config\r\n//     );\r\n    \r\n//     yield call([localStorage, 'setItem'], 'userInfo', JSON.stringify(data));\r\n    \r\n//     // Dispatch only the Redux Saga actions\r\n//     yield put({ type: USER_REGISTER_SUCCESS, payload: data });\r\n//     yield put({ type: USER_LOGIN_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     yield put({\r\n//       type: USER_REGISTER_FAILURE,\r\n//       payload:\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// function* getUserDetailsSaga() {\r\n//   try {\r\n//     const { userInfo } = yield select(getUserState);\r\n    \r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     };\r\n\r\n//     const { data } = yield call(axios.get, '/api/users/profile', config);\r\n    \r\n//     // Dispatch only the Redux Saga action\r\n//     yield put({ type: USER_DETAILS_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     yield put({\r\n//       type: USER_DETAILS_FAILURE,\r\n//       payload:\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// function* updateUserProfileSaga(action) {\r\n//   try {\r\n//     const { userInfo } = yield select(getUserState);\r\n    \r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     };\r\n\r\n//     const { data } = yield call(\r\n//       axios.put,\r\n//       '/api/users/profile',\r\n//       action.payload,\r\n//       config\r\n//     );\r\n    \r\n//     // Dispatch only the Redux Saga actions\r\n//     yield put({ type: USER_UPDATE_PROFILE_SUCCESS, payload: data });\r\n//     yield put({ type: USER_LOGIN_SUCCESS, payload: data });\r\n//     yield call([localStorage, 'setItem'], 'userInfo', JSON.stringify(data));\r\n//   } catch (error) {\r\n//     yield put({\r\n//       type: USER_UPDATE_PROFILE_FAILURE,\r\n//       payload:\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message,\r\n//     });\r\n//   }\r\n// }\r\n\r\n// function* logoutSaga() {\r\n//   yield call([localStorage, 'removeItem'], 'userInfo');\r\n// }\r\n\r\n// // Watcher Sagas\r\n// function* watchUserLogin() {\r\n//   yield takeLatest(USER_LOGIN_REQUEST, loginSaga);\r\n// }\r\n\r\n// function* watchUserRegister() {\r\n//   yield takeLatest(USER_REGISTER_REQUEST, registerSaga);\r\n// }\r\n\r\n// function* watchGetUserDetails() {\r\n//   yield takeLatest(USER_DETAILS_REQUEST, getUserDetailsSaga);\r\n// }\r\n\r\n// function* watchUpdateUserProfile() {\r\n//   yield takeLatest(USER_UPDATE_PROFILE_REQUEST, updateUserProfileSaga);\r\n// }\r\n\r\n// function* watchUserLogout() {\r\n//   yield takeLatest(USER_LOGOUT, logoutSaga);\r\n// }\r\n\r\n// // Root Saga\r\n// export function* userSagas() {\r\n//   yield all([\r\n//     watchUserLogin(),\r\n//     watchUserRegister(),\r\n//     watchGetUserDetails(),\r\n//     watchUpdateUserProfile(),\r\n//     watchUserLogout(),\r\n//   ]);\r\n// }"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}