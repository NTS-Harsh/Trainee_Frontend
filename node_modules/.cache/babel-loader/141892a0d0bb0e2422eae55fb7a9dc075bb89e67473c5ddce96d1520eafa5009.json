{"ast":null,"code":"// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n\n// // Initial state\n// const initialState = {\n//   userInfo: localStorage.getItem('userInfo')\n//     ? JSON.parse(localStorage.getItem('userInfo'))\n//     : null,\n//   loading: false,\n//   error: null,\n//   user: {},\n//   success: false,\n// };\n\n// // Async thunks\n// export const login = createAsyncThunk(\n//   'user/login',\n//   async ({ email, password }, { rejectWithValue }) => {\n//     try {\n//       const config = {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       };\n\n//       const { data } = await axios.post(\n//         '/api/users/login',\n//         { email, password },\n//         config\n//       );\n\n//       localStorage.setItem('userInfo', JSON.stringify(data));\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message\n//       );\n//     }\n//   }\n// );\n\n// export const register = createAsyncThunk(\n//   'user/register',\n//   async ({ name, email, password, department, gender }, { rejectWithValue, dispatch }) => {\n//     try {\n//       const config = {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       };\n\n//       const { data } = await axios.post(\n//         '/api/users',\n//         { name, email, password, department, gender },\n//         config\n//       );\n\n//       localStorage.setItem('userInfo', JSON.stringify(data));\n\n//       // Log user in immediately after registration\n//       dispatch(setUserInfo(data));\n\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message\n//       );\n//     }\n//   }\n// );\n\n// export const getUserDetails = createAsyncThunk(\n//   'user/getDetails',\n//   async (_, { getState, rejectWithValue }) => {\n//     try {\n//       const { userInfo } = getState().user;\n\n//       const config = {\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Authorization: `Bearer ${userInfo.token}`,\n//         },\n//       };\n\n//       const { data } = await axios.get(`/api/users/profile`, config);\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message\n//       );\n//     }\n//   }\n// );\n\n// export const updateUserProfile = createAsyncThunk(\n//   'user/updateProfile',\n//   async (user, { getState, rejectWithValue, dispatch }) => {\n//     try {\n//       const { userInfo } = getState().user;\n\n//       const config = {\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Authorization: `Bearer ${userInfo.token}`,\n//         },\n//       };\n\n//       const { data } = await axios.put(`/api/users/profile`, user, config);\n\n//       // Update login state with new user info\n//       localStorage.setItem('userInfo', JSON.stringify(data));\n//       dispatch(setUserInfo(data));\n\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message\n//       );\n//     }\n//   }\n// );\n\n// // Create the slice\n// const userSlice = createSlice({\n//   name: 'user',\n//   initialState,\n//   reducers: {\n//     setUserInfo: (state, action) => {\n//       state.userInfo = action.payload;\n//     },\n//     logout: (state) => {\n//       localStorage.removeItem('userInfo');\n//       state.userInfo = null;\n//       state.user = {};\n//     },\n//     resetUserDetails: (state) => {\n//       state.user = {};\n//     },\n//     resetUpdateProfile: (state) => {\n//       state.success = false;\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       // Login\n//       .addCase(login.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(login.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.userInfo = action.payload;\n//       })\n//       .addCase(login.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Register\n//       .addCase(register.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(register.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.userInfo = action.payload;\n//       })\n//       .addCase(register.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Get user details\n//       .addCase(getUserDetails.pending, (state) => {\n//         state.loading = true;\n//       })\n//       .addCase(getUserDetails.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.user = action.payload;\n//       })\n//       .addCase(getUserDetails.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       })\n\n//       // Update profile\n//       .addCase(updateUserProfile.pending, (state) => {\n//         state.loading = true;\n//       })\n//       .addCase(updateUserProfile.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.success = true;\n//         state.user = action.payload;\n//       })\n//       .addCase(updateUserProfile.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.payload;\n//       });\n//   },\n// });\n\n// // Export actions and reducer\n// export const { setUserInfo, logout, resetUserDetails, resetUpdateProfile } = userSlice.actions;\n// export default userSlice.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/NTS-HarshvardhanP/Desktop/Isha_Project/frontend/src/redux/slices/userSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import axios from 'axios';\r\n\r\n// // Initial state\r\n// const initialState = {\r\n//   userInfo: localStorage.getItem('userInfo')\r\n//     ? JSON.parse(localStorage.getItem('userInfo'))\r\n//     : null,\r\n//   loading: false,\r\n//   error: null,\r\n//   user: {},\r\n//   success: false,\r\n// };\r\n\r\n// // Async thunks\r\n// export const login = createAsyncThunk(\r\n//   'user/login',\r\n//   async ({ email, password }, { rejectWithValue }) => {\r\n//     try {\r\n//       const config = {\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       };\r\n\r\n//       const { data } = await axios.post(\r\n//         '/api/users/login',\r\n//         { email, password },\r\n//         config\r\n//       );\r\n\r\n//       localStorage.setItem('userInfo', JSON.stringify(data));\r\n//       return data;\r\n//     } catch (error) {\r\n//       return rejectWithValue(\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message\r\n//       );\r\n//     }\r\n//   }\r\n// );\r\n\r\n// export const register = createAsyncThunk(\r\n//   'user/register',\r\n//   async ({ name, email, password, department, gender }, { rejectWithValue, dispatch }) => {\r\n//     try {\r\n//       const config = {\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//       };\r\n\r\n//       const { data } = await axios.post(\r\n//         '/api/users',\r\n//         { name, email, password, department, gender },\r\n//         config\r\n//       );\r\n\r\n//       localStorage.setItem('userInfo', JSON.stringify(data));\r\n      \r\n//       // Log user in immediately after registration\r\n//       dispatch(setUserInfo(data));\r\n      \r\n//       return data;\r\n//     } catch (error) {\r\n//       return rejectWithValue(\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message\r\n//       );\r\n//     }\r\n//   }\r\n// );\r\n\r\n// export const getUserDetails = createAsyncThunk(\r\n//   'user/getDetails',\r\n//   async (_, { getState, rejectWithValue }) => {\r\n//     try {\r\n//       const { userInfo } = getState().user;\r\n\r\n//       const config = {\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           Authorization: `Bearer ${userInfo.token}`,\r\n//         },\r\n//       };\r\n\r\n//       const { data } = await axios.get(`/api/users/profile`, config);\r\n//       return data;\r\n//     } catch (error) {\r\n//       return rejectWithValue(\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message\r\n//       );\r\n//     }\r\n//   }\r\n// );\r\n\r\n// export const updateUserProfile = createAsyncThunk(\r\n//   'user/updateProfile',\r\n//   async (user, { getState, rejectWithValue, dispatch }) => {\r\n//     try {\r\n//       const { userInfo } = getState().user;\r\n\r\n//       const config = {\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           Authorization: `Bearer ${userInfo.token}`,\r\n//         },\r\n//       };\r\n\r\n//       const { data } = await axios.put(`/api/users/profile`, user, config);\r\n      \r\n//       // Update login state with new user info\r\n//       localStorage.setItem('userInfo', JSON.stringify(data));\r\n//       dispatch(setUserInfo(data));\r\n      \r\n//       return data;\r\n//     } catch (error) {\r\n//       return rejectWithValue(\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message\r\n//       );\r\n//     }\r\n//   }\r\n// );\r\n\r\n// // Create the slice\r\n// const userSlice = createSlice({\r\n//   name: 'user',\r\n//   initialState,\r\n//   reducers: {\r\n//     setUserInfo: (state, action) => {\r\n//       state.userInfo = action.payload;\r\n//     },\r\n//     logout: (state) => {\r\n//       localStorage.removeItem('userInfo');\r\n//       state.userInfo = null;\r\n//       state.user = {};\r\n//     },\r\n//     resetUserDetails: (state) => {\r\n//       state.user = {};\r\n//     },\r\n//     resetUpdateProfile: (state) => {\r\n//       state.success = false;\r\n//     },\r\n//   },\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       // Login\r\n//       .addCase(login.pending, (state) => {\r\n//         state.loading = true;\r\n//         state.error = null;\r\n//       })\r\n//       .addCase(login.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.userInfo = action.payload;\r\n//       })\r\n//       .addCase(login.rejected, (state, action) => {\r\n//         state.loading = false;\r\n//         state.error = action.payload;\r\n//       })\r\n      \r\n//       // Register\r\n//       .addCase(register.pending, (state) => {\r\n//         state.loading = true;\r\n//         state.error = null;\r\n//       })\r\n//       .addCase(register.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.userInfo = action.payload;\r\n//       })\r\n//       .addCase(register.rejected, (state, action) => {\r\n//         state.loading = false;\r\n//         state.error = action.payload;\r\n//       })\r\n      \r\n//       // Get user details\r\n//       .addCase(getUserDetails.pending, (state) => {\r\n//         state.loading = true;\r\n//       })\r\n//       .addCase(getUserDetails.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.user = action.payload;\r\n//       })\r\n//       .addCase(getUserDetails.rejected, (state, action) => {\r\n//         state.loading = false;\r\n//         state.error = action.payload;\r\n//       })\r\n      \r\n//       // Update profile\r\n//       .addCase(updateUserProfile.pending, (state) => {\r\n//         state.loading = true;\r\n//       })\r\n//       .addCase(updateUserProfile.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.success = true;\r\n//         state.user = action.payload;\r\n//       })\r\n//       .addCase(updateUserProfile.rejected, (state, action) => {\r\n//         state.loading = false;\r\n//         state.error = action.payload;\r\n//       });\r\n//   },\r\n// });\r\n\r\n// // Export actions and reducer\r\n// export const { setUserInfo, logout, resetUserDetails, resetUpdateProfile } = userSlice.actions;\r\n// export default userSlice.reducer;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}